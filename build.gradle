
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://plugins.gradle.org/m2' }
        maven {
            url 'https://m2.dv8tion.net/releases'
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

version = 'V2.0P'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ZoneEcho'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
idea { module { inheritOutputDirs = true } }
sourceSets {
    main { output.resourcesDir = output.classesDir }
}



minecraft {

    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'stable', version: '39-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            arg '--mixin.config mixins.zoneecho.json'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=mixins.zoneecho.json"
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    implementation('org.spongepowered:mixin:0.8.5') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'org.json:json:20220924'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8.5:processor'


    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation("org.spongepowered:mixin:0.8.2")



     //implementation(fg.deobf("fr.dynamx:DynamX:3.3.1-rd3"))
     // implementation(fg.deobf("fr.aym.acsguis:ACsGuis:1.2.1-3"))
     // implementation 'club.minnced:discord-rpc-release:v3.4.0'

    // implementation fileTree(dir: 'libs2', includes: ['*.jar'])
    implementation fg.deobf(fileTree(dir: 'libs2', include: '*.jar'))
    implementation 'com.graphql-java:graphql-java:20.0'

    shadow group: 'org.spongepowered', name: 'mixin', version: '0.8.2'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}



repositories {
    maven {
        url = 'https://maven.dynamx.fr/artifactory/DynamXRepo'
    }
    maven {
        url = 'https://maven.dynamx.fr/artifactory/ACsGuisRepo'
    }
    mavenCentral()

}


repositories {
    flatDir {
        dirs 'libs2'
    }
}
configurations {
    shade
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "examplemod",
                "Specification-Vendor": "examplemodsareus",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}



// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfShadowJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

jar {
    manifest {
        attributes "FMLCorePlugin": "mixins.ZoneEchoLoadingPlugin"
        attributes "FMLAT": "dynamx_at.cfg"
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "ForceLoadAsMod": "true"
        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        attributes "TweakOrder": "0"
        attributes "MixinConfigs": "mixins.zoneecho.json"
        attributes 'FMLCorePlugin': 'net.montoyo.mcef.ShutdownPatcher',
                'FMLCorePluginContainsFMLMod': 'true',
                'Main-Class': 'net.montoyo.mcef.setup.SetupUI'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


mixin {
    add sourceSets.main, "refmap.zoneecho.json"
    config 'mixins.zoneecho.json'
    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true

}

build.dependsOn(shadowJar)

shadowJar {
    classifier = ''
    configurations = [project.configurations.shade]
    relocate 'lib.group', "${project.group}.shadow.lib.group" // ensure repackaged packages have unique names
    exclude 'openauth-1.1.2.jar' // exclude openauth from the shadow jar
    dependencies {
        include(dependency('org.spongepowered:mixin:0.8.5'))
    }
}

reobf {
    shadowJar { }
}